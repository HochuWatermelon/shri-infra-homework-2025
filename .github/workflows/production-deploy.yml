name: Deploy to Production
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version to deploy (number)'
        required: true

env:
  REGISTRY_ID: crperh81ttnqgnsobd6c
  APP_NAME: app
  VM_IP: 51.250.29.116
  SSH_USER: olechkakulic

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup environment
        run: |
          echo "Preparing to deploy version ${{ github.event.inputs.release_version }}"
          
      - name: Install YC CLI
        run: |
          curl -s https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Authenticate in Container Registry
        env:
          YC_SA_KEY: ${{ secrets.YC_SA_KEY }}  # JSON ключа вашего существующего сервисного аккаунта
        run: |
          # 1. Сохраняем ключ сервисного аккаунта
          echo "$YC_SA_KEY" > key.json
          
          # 2. Проверяем валидность ключа
          if ! jq -e .private_key key.json >/dev/null; then
            echo "::error::Invalid service account key format"
            exit 1
          fi
          
          # 3. Аутентификация в Docker Registry (прямой способ)
          if ! jq -r .private_key key.json | docker login --username iam --password-stdin cr.yandex; then
            echo "::error::Failed to login to container registry"
            exit 1
          fi
          
          # 4. Проверка доступа
          echo "Successfully logged in to cr.yandex"

      - name: Verify image exists
        run: |
          if ! docker manifest inspect cr.yandex/${{ env.REGISTRY_ID }}/${{ env.APP_NAME }}:${{ github.event.inputs.release_version }}_latest; then
            echo "::error::Image not found in registry"
            exit 1
          fi

      - name: Deploy to VM
        env:
          SSH_KEY: ${{ secrets.VM_SSH_KEY }}
        run: |
          # Prepare SSH key
          echo "$SSH_KEY" > ssh_key
          chmod 600 ssh_key
          
          # Deployment commands
          ssh -i ssh_key -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.VM_IP }} << 'EOF'
            # Stop and remove old container
            docker stop app || true
            docker rm app || true
            
            # Authenticate on VM
            echo "$YC_SA_KEY" > /tmp/key.json
            jq -r .private_key /tmp/key.json | docker login --username iam --password-stdin cr.yandex
            
            # Pull and run new version
            docker pull cr.yandex/$REGISTRY_ID/$APP_NAME:$1_latest
            docker run -d -p 80:3000 --name app cr.yandex/$REGISTRY_ID/$APP_NAME:$1_latest
          EOF
          " "${{ github.event.inputs.release_version }}"

      - name: Update deployment status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ github.event.inputs.release_version }} \
            --body "**Deployment Successful**  
                    **Version:** ${{ github.event.inputs.release_version }}  
                    **Deployed by:** ${{ github.actor }}  
                    **Image:** cr.yandex/${{ env.REGISTRY_ID }}/${{ env.APP_NAME }}:${{ github.event.inputs.release_version }}_latest  
                    **Timestamp:** $(date +'%Y-%m-%d %H:%M %Z')"
